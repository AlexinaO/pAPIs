{
  "swagger" : "2.0",
  "info" : {
    "description" : "pAPIs server api",
    "version" : "1.0.0",
    "title" : "pAPIs server"
  },
  "host" : "https://lespapis.herokuapp.com/",
  "basePath" : "api/",
  "tags" : [ {
    "name" : "book",
    "description" : "Books"
  }, {
    "name" : "auth",
    "description" : "Auth"
  } ],
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/book" : {
      "post" : {
        "tags" : [ "book" ],
        "summary" : "Add a new book to the store",
        "operationId" : "bookStore",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Book object that needs to be added to the store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Book"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        },
        "security" : [ {
          "bookstore_auth" : [ "write:books", "read:books" ]
        } ]
      },
      "put" : {
        "tags" : [ "book" ],
        "summary" : "Update an existing book",
        "operationId" : "bookUpdate",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Book object that needs to be added to the store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Book"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Book not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        },
        "security" : [ {
          "bookstore_auth" : [ "write:books", "read:books" ]
        } ]
      }
    },
    "/book/{id}" : {
      "get" : {
        "tags" : [ "book" ],
        "summary" : "Find book by ID",
        "description" : "Returns a single book",
        "operationId" : "bookDetail",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "ID of book to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Book"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Book not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "book" ],
        "summary" : "Deletes a book",
        "operationId" : "bookDelete",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "id",
          "in" : "path",
          "description" : "Book id to delete",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Book not found"
          }
        },
        "security" : [ {
          "bookstore_auth" : [ "write:books", "read:books" ]
        } ]
      }
    },
    "/book/all" : {
      "get" : {
        "tags" : [ "book" ],
        "summary" : "Find all books with pagination",
        "description" : "Returns all books with pagination",
        "operationId" : "allBooks",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "X-Request-ID",
          "in" : "header",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "Link",
          "in" : "header",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "page",
          "in" : "path",
          "description" : "wanted page",
          "required" : true,
          "type" : "integer"
        }, {
          "name" : "booksByPage",
          "in" : "path",
          "description" : "number of books wanted by page",
          "required" : true,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Book"
            }
          },
          "206" : {
            "description" : "Partial result",
            "schema" : {
              "$ref" : "#/definitions/Book"
            }
          },
          "400" : {
            "description" : "Invalid wanted page or number of books supplied"
          },
          "404" : {
            "description" : "Books not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/auth/login" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Logs user into the system",
        "operationId" : "login",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "The email for login",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "query",
          "description" : "The password for login in clear text",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
          },
          "400" : {
            "description" : "Invalid email/password supplied"
          }
        }
      }
    },
    "/auth/logout" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Logs out current logged in user session",
        "operationId" : "logoutUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "auth/register" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "Add a new user",
        "operationId" : "register",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "User object that needs to be added",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          },
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "string"
            }
        }
      }
    },
    "/auth/verify-otp" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "verify-otp",
        "operationId" : "verifyConfirm",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "The email for confirmation",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "otp",
          "in" : "query",
          "description" : "one time password",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/auth/resend-verify-otp" : {
      "post" : {
        "tags" : [ "auth" ],
        "summary" : "resend verify-otp",
        "operationId" : "resendConfirmOtp",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "query",
          "description" : "The email for confirmation",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "bookstore_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "http://bookstore.swagger.io/oauth/dialog",
      "flow" : "implicit",
      "scopes" : {
        "write:books" : "modify books in your account",
        "read:books" : "read your books"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "Book" : {
      "type" : "object",
      "required" : [ "author", "description", "isbn", "title", "user", "year" ],
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "title" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "isbn" : {
          "type" : "string"
        },
        "user" : {
          "$ref" : "#/definitions/User"
        },
        "year" : {
          "type" : "string",
          "format" : "date"
        },
        "author" : {
          "type" : "string"
        }
      }
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "username" : {
          "type" : "string"
        },
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "phone" : {
          "type" : "string"
        },
        "userStatus" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "User Status"
        }
      },
      "xml" : {
        "name" : "User"
      }
    }
  }
}