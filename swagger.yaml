---
swagger: "2.0"
info:
  description: "This is a sample Bookstore server.  You can find \nout more about Swagger at \n[http://swagger.io](http://swagger.io) or on \n[irc.freenode.net, #swagger](http://swagger.io/irc/).\n"
  version: 1.0.0
  title: Swagger Bookstore
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: virtserver.swaggerhub.com
basePath: /jennifergullung/pAPIsv2/1.0.0
tags:
- name: book
  description: Everything about your Books
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
schemes:
- https
- http
paths:
  /api/book:
    post:
      tags:
      - book
      summary: Add a new book to the store
      operationId: bookStore
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Book object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Book'
      responses:
        "405":
          description: Invalid input
      security:
      - bookstore_auth:
        - write:books
        - read:books
    put:
      tags:
      - book
      summary: Update an existing book
      operationId: bookUpdate
      consumes:
      - application/json
      - application/xml
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Book object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Book'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
        "405":
          description: Validation exception
      security:
      - bookstore_auth:
        - write:books
        - read:books
  /api/book/{id}:
    get:
      tags:
      - book
      summary: Find book by ID
      description: Returns a single book
      operationId: bookDetail
      produces:
      - application/json
      - application/xml
      parameters:
      - name: id
        in: path
        description: ID of book to return
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/Book'
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
      security:
      - api_key: []
    delete:
      tags:
      - book
      summary: Deletes a book
      operationId: bookDelete
      produces:
      - application/json
      - application/xml
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: id
        in: path
        description: Book id to delete
        required: true
        type: string
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Book not found
      security:
      - bookstore_auth:
        - write:books
        - read:books
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: Created user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      produces:
      - application/json
      - application/xml
      parameters:
      - in: body
        name: body
        description: List of user object
        required: true
        schema:
          type: array
          items:
            $ref: '#/definitions/User'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
          schema:
            type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      produces:
      - application/json
      - application/xml
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        type: string
      responses:
        "200":
          description: successful operation
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        type: string
      - in: body
        name: body
        description: Updated user object
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      produces:
      - application/json
      - application/xml
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
securityDefinitions:
  bookstore_auth:
    type: oauth2
    authorizationUrl: http://bookstore.swagger.io/oauth/dialog
    flow: implicit
    scopes:
      write:books: modify books in your account
      read:books: read your books
  api_key:
    type: apiKey
    name: api_key
    in: header
definitions:
  Book:
    type: object
    required:
    - author
    - description
    - isbn
    - title
    - user
    - year
    properties:
      id:
        type: string
      title:
        type: string
      description:
        type: string
      isbn:
        type: string
      user:
        $ref: '#/definitions/User'
      year:
        type: string
        format: date
      author:
        type: string
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      username:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      password:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
    xml:
      name: User
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
